# ggplot(focal2, aes(x = Species, fill = Multi_SignifVariables)) +
#   geom_bar(position = position_dodge2(width = 2, preserve = "single")) + coord_flip(expand = F) + ylab("Number of Locations") + xlab("") +
#   scale_fill_manual(values=c("sandybrown", "turquoise4", "hotpink4", "grey50"),
#                     labels = c("Temperature", "Precipitation", "Both", "Neither"),
#                     name = "Significant Variables") + theme_bw() +
#   theme(legend.position = "none", axis.text.y = element_text(face = "italic")) +
#   scale_x_discrete(labels = my_labels) + scale_y_continuous(limits = c(0,4), breaks = seq(0,4,1))
# dev.off()
monthly = read.csv("../Results/GAM_monthly.csv", header = T, stringsAsFactors = F)
# Remove rows where either multi model did not converge
remove = which(is.na(monthly$MultiAR_DevianceExplained) | is.na(monthly$MultiAR_DevianceExplained))
monthly = monthly[-remove,]
# Also remove monthly datasets with too much zero inflation
remove = which(monthly$z_inflation_pct > 90)
monthly = monthly[-remove,]
# Hist for each location
# Create a vector of locations
locations = unique(monthly$Location)
# Create empty list to store each location plot
plots = vector("list", length = length(locations))
names(plots) = locations
colors = wes_palette("Royal2", n = 5, type = "discrete")
# Loop through locations to make a histogram for each one
for(i in 1:length(locations)){
tmp = monthly %>% filter(Location == locations[i])
color = colors[i]
plots[[i]] = ggplot(tmp, aes(x = DevDiff)) + geom_histogram(breaks = seq(-10,100,10), fill = colors[i]) + theme_bw() +
xlab("Change in Deviance (%) with\nAddition of Autoregressive Term") + ylab("Number of Locations")  + ggtitle(locations[i]) +
#scale_x_continuous(breaks= seq(-5 ,100,by=5),
#                   labels = c("", 0, rep("",3), 20, rep("",3), 40, rep("",3), 60,
#                              rep("",3), 80, rep("",3), 100),
#                   limits = c(-5,100), expand = c(0,0)) +
#scale_y_continuous(breaks = seq(0,max(tmp$),5)) +
theme(legend.position = c(0.7, 0.65), legend.title = element_text(size = 8),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size =10), axis.title.y = element_text(size = 10),
legend.text = element_text(size = 7), plot.margin = unit(c(0.3,0.3,0,0.1), "cm")) +
scale_y_discrete(breaks = seq(0, ))
print(plots[[i]])
}
# Extract legend from the plot, but without the margins
tmp = ggplot_gtable(ggplot_build(alldatasets + theme(plot.margin = unit(c(0,0,0,0), "cm"))))
plot(Aalbo, rug = FALSE, #shift = coef(multi_gam)[1],
seWithMean = T, select = c(1),# ylim = c(-0.5,0.5),
shade = T, shade.col = "orange",
ylab = "Partial Dependency of Abundance", xlab = "Maximum Temperature (°C)",
panel.first = grid(col = "cornsilk3"))
Aalbo
#!/bin/env Rscript
# Author: Anne Marie Saunders
# Script: graphics.R
# Desc: Create graphics for inclusion in writeup
# Arguments:
# Date: 07/31/2020
## Import functions and libraries
source("gam_functions.R")
library("ggplot2")
library("wesanderson")
library("tidyverse")
library("gridExtra")
#library("mgcViz")
#library("extrafont")
#### Create disease plot for introduction ####
diseases = read.csv("../Data/local_arbovirus_infections.csv", header = T, stringsAsFactors = F)
pdf("../Images/arboviralcases.pdf", height = 4, width = 6)
#loadfonts(device = "postscript")
#par(family = "LM Roman 10")
ggplot(diseases[which(diseases$Disease != "Zika"),], aes(x = Year, y = Count, color = Disease)) +
geom_line(lwd = 1, alpha = 0.5) + theme_bw() + geom_point() +
scale_color_manual(values=wes_palette(n=5, name="Darjeeling1")) + ylab("Cases") +
theme(legend.position = c(0.2, 0.75), legend.title = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
dev.off()
#### Create sample time series plots of temperature, precipitation, and abundance
ts_data = read.csv("../Data/Extracted_Data/Aggregated/Manatee_monthly.csv", header = T, stringsAsFactors = F)
# Keep only biggest VBD threat mosquitoes
threats = c("Aedes.aegypti", "Aedes.albopictus", "Culex.nigripalpus", "Anopheles.quadrimaculatus")
ts_data = ts_data[,colnames(ts_data) %in% c(threats, "temp_mean", "precip_days", "date_dm", "Year")]
# Convert date to date format
ts_data$date_dm = as.Date(ts_data$date_dm, format = "%Y-%m-%d") # weekly
#ts_data$date = seq(1:nrow(ts_data))
# Gather this into long shape
ts_data = ts_data %>% gather(Species, Value, -c(date_dm, precip_days, temp_mean, Year))
# Plot
title <- expression(paste(italic("Aedes albopictus"), " Abundance"))
aedes_abun_plot = ggplot(ts_data[ts_data$Species == "Aedes.albopictus",], aes(x=date_dm, y = Value)) +
geom_line(color = "darkorchid4") + xlab("") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year") +
ggtitle(title) +
theme_bw() + labs(y = "Abundance (average count per trap)", x = "Time", cex = 0.9) +
theme(legend.position = c(0.2, 0.75),
legend.title = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(size = 11), axis.text.y = element_text(size = 11),
axis.title.x = element_text(size = 11), axis.title.y = element_text(size = 11),
plot.title = element_text(size = 12)) +
#scale_x_continuous(labels = unique(ts_data$Year), breaks = c(1:length(unique(ts_data$Year)))*25)
pdf("../Images/aedes_abun_ts.pdf", height = 4, width = 4.5)
aedes_abun_plot
dev.off()
title <- expression(paste(italic("Culex nigripalpus"), " Abundance"))
culex_abun_plot = ggplot(ts_data[ts_data$Species == "Culex.nigripalpus",], aes(x=date_dm, y = Value)) +
geom_line(color = "darkorchid4") + xlab("") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year") +
ggtitle(title) +
theme_bw() + labs(y = "Abundance (average count per trap)", x = "Time", cex = 0.9) +
theme(legend.position = c(0.2, 0.75),
legend.title = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(size = 11), axis.text.y = element_text(size = 11),
axis.title.x = element_text(size = 11), axis.title.y = element_text(size = 11),
plot.title = element_text(size = 12))
pdf("../Images/culex_abun_ts.pdf", height = 4, width = 4.5)
culex_abun_plot
dev.off()
temp_plot = ggplot(ts_data[ts_data$Species == "Aedes.albopictus",], aes(x=date_dm, y = temp_mean)) +
geom_line(color = "darkorange4") + xlab("") + scale_x_date(date_labels = "%Y", date_breaks = "1 year") +
ggtitle("Average Maximum Temperature") +
theme_bw() + labs(y = "Temperature (°C)", x = "Time", cex = 0.9) +
theme(legend.position = c(0.2, 0.75),
legend.title = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(size = 11), axis.text.y = element_text(size = 11),
axis.title.x = element_text(size = 11), axis.title.y = element_text(size = 11),
plot.title = element_text(size = 12))
pdf("../Images/temp_ts.pdf", height = 4, width = 4.5)
temp_plot
dev.off()
precip_plot = ggplot(ts_data[ts_data$Species == "Aedes.albopictus",], aes(x=date_dm, y = precip_days)) +
geom_bar(stat = "identity", fill = "turquoise4", color = "turquoise4") + xlab("") + scale_x_date(date_labels = "%Y", date_breaks = "1 year") +
ggtitle("Precipitation") + scale_y_continuous(breaks = seq(0,31,5)) +
theme_bw() + labs(y = "Days of Rainfall per Month", x = "Time", cex = 0.9) +
theme(legend.position = c(0.2, 0.75),
legend.title = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(size = 11), axis.text.y = element_text(size = 11),
axis.title.x = element_text(size = 11), axis.title.y = element_text(size = 11),
plot.title = element_text(size = 12)) +
#scale_x_continuous(labels = c(unique(ts_data$Year), max(ts_data$Year) + 1), breaks = c(0:length(unique(ts_data$Year)))*25)
pdf("../Images/precip_ts.pdf", height = 4, width = 4.5)
precip_plot
dev.off()
# pdf("../Images/ts_plots.pdf", height = 6, width = 7)
# grid.arrange(abun_plot, temp_plot, precip_plot, ncol = 3)
# dev.off()
#### Create 2d Partial Dependency Plot of temperature and precipitation
# Create function to fit GAM and plot
fit_multi = function(scale, locale, pick_spec, filename){
# Load output data
output = read.csv(file = paste0("../Results/GAM_", scale, ".csv"), header = T, stringsAsFactors = F)
# Load dataset with time series data
ts_data = read.csv(file = paste0("../Data/Extracted_Data/Aggregated/", locale, "_", scale, ".csv"), header = T, stringsAsFactors = F)
species = colnames(ts_data[10:(dim(ts_data)[2]-3)])
# Create vectors identifying the lags at this temporal scale
lags = make_laglists(scale = scale)
# Create a data frame of lagged meteorological values
lag_table = make_lag_table(temp = ts_data$temp_mean, precip = ts_data$precip_days, lags = lags)
# Pick a species
i = which(species == pick_spec)
# Find row index in output
output_index = which(output$Species == pick_spec & output$Location == locale)
# Prepare x and y variables. We'll use the best fit lags of temp and precip for each species
vars = prep_variables(temp = lag_table[[output$Best_Temp[output_index]]],
precip = lag_table[[output$Best_Precip[output_index]]],
abundance = ts_data[[species[i]]])
# Max number of basis splines is = to the number of unique data points (discrete days of rainfall)
# Thus max k (number of knots) is equal to nr of unique values + 1.
# Default will be 10, but datasets with fewer unique values 9 than this will be adjusted accordingly
precip_k = 10
if(length(unique(vars$precip)) < 10){precip_k = length(unique(vars$precip))}
# Fit non-autoregressive multivariate model where smooth terms can be penalized out
multi_gam = try(gam(abundance ~ s(temp, bs = 'cr', k = 10) + s(precip, k = precip_k, bs = 'cr'), data = vars, family = Gamma(link = "log"), method = "REML", select = T), silent = T)
print(summary(multi_gam))
return(list(gam = multi_gam, y = vars$abundance, temp = vars$temp, precip = vars$precip))
}
AQ_gam = fit_multi(scale = 'monthly', locale = 'Lee',
pick_spec = "Anopheles.quadrimaculatus")
pdf("../Images/multi_plotAQ.pdf", height = 4, width = 8)
par(mfrow = c(1,2), mar = c(4,4,3,1))
test = plot(AQ_gam$gam, rug = T, #shift = coef(AQ_gam$gam)[1], ylim = c(0,5),
seWithMean = T, select = c(1), ylim = c(-1.5,1.5),
shade = T, shade.col = "darkorange3", yaxt = "n",
ylab = "Partial Dependency of Abundance", xlab = "Maximum Temperature (°C)",
panel.first = grid(col = "cornsilk3"))
axis(side = 2, at= c(-1,0,1), labels = c("-1", "0", "1"))
title("Temperature", adj = 0)
plot(AQ_gam$gam, rug = T, #shift = coef(multi_gam)[1],
ylim = c(-1.5,1.5), seWithMean = T, select = c(2),
shade = T, shade.col = "turquoise4", #main = "Precipitation",
ylab = "", xlab = "Days of Rainfall",
panel.first = grid(col = "cornsilk3"),
yaxt = "n")
axis(side = 2, at= c(-1,0,1), labels = c("-1", "0", "1"))
title("Precipitation", adj = 0)
dev.off()
Aalbo = fit_multi(scale = 'monthly', locale = 'Saint_Johns',
pick_spec = "Aedes.infirmatus")
#pdf("../Images/multi_plotAQ.pdf", height = 4, width = 8)
#par(mfrow = c(1,2), mar = c(4,4,3,1))
#plot(Aalbo$gam, rug = FALSE, #shift = coef(multi_gam)[1],
#      seWithMean = T, select = c(1),# ylim = c(-0.5,0.5),
#      shade = T, shade.col = "orange",
#      ylab = "Partial Dependency of Abundance", xlab = "Maximum Temperature (°C)",
#      panel.first = grid(col = "cornsilk3"))
# title("Temperature", adj = 0)
#
# plot(Aalbo, rug = FALSE, #shift = coef(multi_gam)[1],
#      ylim = c(-1.5,1.5), seWithMean = T, select = c(2),
#      shade = T, shade.col = "lightblue", #main = "Precipitation",
#      ylab = "", xlab = "Days of Rainfall",
#      panel.first = grid(col = "cornsilk3"),
#      yaxt = "n")
# axis(side = 2, at= -1.5:1.5)
# title("Precipitation", adj = 0)
# dev.off()
#### Significance of Temperature and Precipitation ####
# Load monthly data
monthly = read_csv("../Results/GAM_monthly.csv")
# Remove datasets with more than 90% zero inflation and keep only relevant columns
monthly = monthly %>%
filter(z_inflation_pct <= 90.0 & !is.na(Multi_DevianceExplained)) %>%
select(Species, Location, Multi_SignifVariables, Best_Temp, Best_Precip)
cat("There are ", length(unique(monthly$Species)), " unique species in the variable comparison")
# Add a column for genus
monthly = monthly %>%
add_column(genus = sub("\\.", "", str_match(monthly$Species, pattern = "^\\w*\\.")))
# Adjust "A" and "C" genus names
monthly$genus = sub("^A$", "Aedes", monthly$genus)
monthly$genus = sub("^C$", "Culex", monthly$genus)
# Change NAs in SignifVariables to Neither
monthly$Multi_SignifVariables = replace(monthly$Multi_SignifVariables,
is.na(monthly$Multi_SignifVariables), "Neither")
# Change both temp and precip to "Both"
monthly$Multi_SignifVariables = replace(monthly$Multi_SignifVariables,
nchar(monthly$Multi_SignifVariables) > 7, "Both")
# Convert significant variables to factor and put in order
monthly$Multi_SignifVariables = factor(monthly$Multi_SignifVariables,
levels  = c("temp", "precip", "Both", "Neither"))
# Convert significant variables to factor and put in order
monthly$Best_Precip = factor(monthly$Best_Precip,
levels  = c("precip_lag2", "precip_lag1", "precip_lag0"))
monthly$Best_Temp = factor(monthly$Best_Temp,
levels  = c("temp_lag2", "temp_lag1", "temp_lag0"))
# Find species which occur in all five locations
focal = monthly %>%
group_by(Species) %>% filter(n() > 4)
# Find species which occur in 4 locations
focal2 = monthly %>%
group_by(Species) %>% filter(n() == 4)
pdf("../Images/byspecies5_lag.pdf", height = 4, width = 3.4)
my_labels = gsub("\\.", " ", unique(focal$Species))
my_labels[10:11] = c("Culex pipiens**", "Aedes atlanticus**")
temp_plot = ggplot(focal, aes(x = Species, fill = Best_Temp)) + ggtitle("Temperature Lags") +
geom_bar(position = position_dodge2(width = 2, preserve = "single")) + coord_flip(expand = F) + ylab("Number of Locations") + xlab("") +
scale_fill_manual(values=c("darkorange4", "orange2", "grey50"),
labels = c("2 months", "1 month", "No lag"),
name = "Best Lags") + theme_bw() +
theme(legend.position = c(0.8,0.8),
axis.text.y = element_text(face = "italic"), legend.text = element_text(size = 8),
plot.subtitle = element_text("** species complex"), legend.title = element_text(size = 9)) +
scale_x_discrete(labels = my_labels) + scale_y_continuous(limits = c(0,5))
temp_plot
precip_plot = ggplot(focal, aes(x = Species, fill = Best_Precip)) + ggtitle("Precipitation Lags") +
geom_bar(position = position_dodge2(width = 2, preserve = "single")) + coord_flip(expand = F) + ylab("Number of Locations") + xlab("") +
scale_fill_manual(values=c("steelblue4", "steelblue2", "grey50"),
labels = c("2 months", "1 month", "No lag"),
name = "Best Lags") + theme_bw() +
theme(legend.position = c(0.8,0.8),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),#element_text(face = "italic"),
legend.text = element_text(size = 8),
legend.title = element_text(size = 9)) + scale_y_continuous(limits = c(0,5))
precip_plot
pdf("../Images/byspecies5_templags.pdf", height = 4, width = 4.3)
temp_plot
dev.off()
pdf("../Images/byspecies5_preciplags.pdf", height = 4, width = 2.7)
precip_plot
dev.off()
alldata_monthly = monthly %>% group_by(Multi_SignifVariables) %>% tally()
alldatasets = ggplot(alldata_monthly, aes(x = Multi_SignifVariables, y = n, fill = Multi_SignifVariables)) +
geom_bar(stat = "identity") + ylab("Number of Datasets") + xlab("Signficiant\nVariables") +
scale_fill_manual(values=c("sandybrown", "turquoise4", "hotpink4", "grey50"),
labels = c("Temperature", "Precipitation", "Both", "Neither"),
name = "Significant Variables") +
scale_x_discrete(labels = c("Temperature", "Precipitation", "Both", "Neither")) + theme_bw() +
theme(legend.position = "top", legend.box = "vertical", legend.direction='vertical',
axis.text.x = element_blank(), legend.title = element_text(size = 9)) +
scale_y_continuous(breaks = seq(0,50,10), limits = c(0,43)) +
geom_text(aes(label = n), position = position_dodge(0.6), vjust = -0.4, size = 3)
# Save plot
pdf("../Images/alldatasets_sig.pdf", height = 2.5, width = 2)
alldatasets + theme(legend.position = "none")
dev.off()
# Extract legend from the plot, but without the margins
tmp = ggplot_gtable(ggplot_build(alldatasets + theme(plot.margin = unit(c(0,0,0,0), "cm"))))
leg = which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend = tmp$grobs[[leg]]
# Save legend seperately
pdf("../Images/legend_sig.pdf", height = 1.25, width = 1.5)
grid.arrange(legend)
dev.off()
# Find species which occur in all five locations
focal = monthly %>%
group_by(Species) %>% filter(n() > 4)
# Find species which occur in 4 locations
focal2 = monthly %>%
group_by(Species) %>% filter(n() == 4)
pdf("../Images/byspecies5_sig.pdf", height = 4, width = 5)
my_labels = gsub("\\.", " ", unique(focal$Species))
my_labels[10:11] = c("Culex pipiens**", "Aedes atlanticus**")
ggplot(focal, aes(x = Species, fill = Multi_SignifVariables)) +
geom_bar(position = position_dodge2(width = 2, preserve = "single")) + coord_flip(expand = F) + ylab("Number of Locations") + xlab("") +
scale_fill_manual(values=c("sandybrown", "turquoise4", "hotpink4", "grey50"),
labels = c("Temperature", "Precipitation", "Both", "Neither"),
name = "Significant Variables") + theme_bw() +
theme(legend.position = "none", #c(0.8,0.2),
axis.text.y = element_text(face = "italic"),
plot.subtitle = element_text("** species complex"), legend.title = element_text(size = 9)) +
scale_x_discrete(labels = my_labels) + scale_y_continuous(limits = c(0,5))
dev.off()
#### Comparing AR Plot ####
monthly = read.csv("../Results/GAM_monthly.csv", header = T, stringsAsFactors = F)
# Remove rows where either multi model did not converge
remove = which(is.na(monthly$MultiAR_DevianceExplained) | is.na(monthly$MultiAR_DevianceExplained))
monthly = monthly[-remove,]
# Also remove monthly datasets with too much zero inflation
remove = which(monthly$z_inflation_pct > 90)
monthly = monthly[-remove,]
monthly$DevDiff = monthly$MultiAR_DevianceExplained - monthly$Multi_DevianceExplained
# ggplot(monthly, aes(x = DevDiff, color = Location)) + geom_density(alpha = 1) + theme_bw() +
#   xlab("Difference in Deviance (%)") + xlim(0,100) + ylab("Density")
all = ggplot(monthly, aes(x = DevDiff)) + geom_histogram(breaks = seq(-5,100,5), fill = "darkorchid4") + theme_bw() +
xlab("Change in Deviance (%) with\nAddition of Autoregressive Term") + ylab("Number of Datasets")  +
scale_x_continuous(breaks= seq(-10 ,100,by=5),
labels = c(-10, "", 0, rep("",3), 20, rep("",3), 40, rep("",3), 60,
rep("",3), 80, rep("",3), 100),
limits = c(-10,100), expand = c(0,0)) +
scale_y_continuous(breaks = seq(0,30,5)) +
theme(legend.position = c(0.7, 0.65), legend.title = element_text(size = 8),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size =10), axis.title.y = element_text(size = 10),
legend.text = element_text(size = 7), plot.margin = unit(c(0.1,0.3,0,0.1), "cm"))
all
pdf("../Images/devcomp.pdf", height = 3, width = 3.2)
all
dev.off()
median(monthly$DevDiff)
mean(monthly$DevDiff)
# Find out how many models successfully converged on both multivariate models
success = monthly %>% filter(!is.na(Multi_AIC) & !is.na(MultiAR_AIC))
cat("\n", nrow(success), " out of ", nrow(monthly), " monthly datasets successfully converged in both AR and non-AR multivariate models")
# Find out how many datasets were significantly worse, the same, or better with the AR term incorporated
counts = success %>% mutate(AIC_diff = Multi_AIC - MultiAR_AIC) %>% count(AIC_diff > 2, AIC_diff < -2)
counts = counts %>% add_column(Result = c("Equal", "Worse", "Better"))
pdf("../Images/AICcomp.pdf", height = 3, width = 3)
ggplot(counts, aes(x = Result, y = n)) + geom_bar(stat = "identity", fill = "thistle4") +
theme_bw() + ylab("Number of Locations") + xlab("Relative Performance of\nAutoregressive Model") +
geom_text(aes(label = paste0(sprintf("%.1f", 100*n/length(!is.na(monthly$MultiAR_AIC))), "%"), y= n),  vjust = -1)+
guides(fill=FALSE) +
scale_y_continuous(breaks = seq(0,100,25), limits = c(0,100)) +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10), text = element_text(size = 10),
plot.margin = unit(c(0.1,0.3,0,0.1), "cm"))
dev.off()
## Sandbox
## Try lags plot by species
#### Significance of Temperature and Precipitation ####
# Load monthly data
# monthly = read_csv("../Results/GAM_monthly.csv")
#
# # Remove datasets with more than 90% zero inflation and keep only relevant columns
# monthly = monthly %>%
#   filter(z_inflation_pct <= 90.0 & !is.na(Multi_DevianceExplained)) %>%
#   select(Species, Location, Multi_SignifVariables)
#
# cat("There are ", length(unique(monthly$Species)), " unique species in the variable comparison")
#
# # Add a column for genus
# monthly = monthly %>%
#   add_column(genus = sub("\\.", "", str_match(monthly$Species, pattern = "^\\w*\\.")))
#
# # Adjust "A" and "C" genus names
# monthly$genus = sub("^A$", "Aedes", monthly$genus)
# monthly$genus = sub("^C$", "Culex", monthly$genus)
#
# # Change NAs in SignifVariables to Neither
# monthly$Multi_SignifVariables = replace(monthly$Multi_SignifVariables,
#                                         is.na(monthly$Multi_SignifVariables), "Neither")
#
# # Change both temp and precip to "Both"
# monthly$Multi_SignifVariables = replace(monthly$Multi_SignifVariables,
#                                         nchar(monthly$Multi_SignifVariables) > 7, "Both")
#
# # Convert significant variables to factor and put in order
# monthly$Multi_SignifVariables = factor(monthly$Multi_SignifVariables,
#                                        levels  = c("temp", "precip", "Both", "Neither"))
#
# alldata_monthly = monthly %>% group_by(Multi_SignifVariables) %>% tally()
#
# alldatasets = ggplot(alldata_monthly, aes(x = Multi_SignifVariables, y = n, fill = Multi_SignifVariables)) +
#   geom_bar(stat = "identity") + ylab("Number of Locations") + xlab("Signficiant\nVariables") +
#   scale_fill_manual(values=c("sandybrown", "turquoise4", "hotpink4", "grey50"),
#                     labels = c("Temperature", "Precipitation", "Both", "Neither"),
#                     name = "Significant Variables") +
#   scale_x_discrete(labels = c("Temperature", "Precipitation", "Both", "Neither")) + theme_bw() +
#   theme(legend.position = "top", legend.box = "vertical", legend.direction='vertical',
#         axis.text.x = element_blank()) +
#   scale_y_continuous(breaks = seq(0,50,10), limits = c(0,43)) +
#   geom_text(aes(label = n), position = position_dodge(0.6), vjust = -0.4, size = 3)
#
#
# # Save plot
# pdf("../Images/alldatasets_sig.pdf", height = 2.5, width = 2)
# alldatasets + theme(legend.position = "none")
# dev.off()
#
#
# # Extract legend from plot
# tmp = ggplot_gtable(ggplot_build(alldatasets))
# leg = which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
# legend = tmp$grobs[[leg]]
#
# # Save legend seperately
# pdf("../Images/legend_sig.pdf", height = 1.5, width = 1.5)
# grid.arrange(legend)
# dev.off()
#
#
# bygenus = ggplot(monthly, aes(x = genus, fill = Multi_SignifVariables)) +
#   geom_bar(position = position_dodge2(width = 2, preserve = "single")) + coord_flip(expand = F) +
#   ylab("Number of Locations") + xlab("") +
#   scale_fill_manual(values=c("sandybrown", "turquoise4", "hotpink4", "grey50"),
#                     labels = c("Temperature", "Precipitation", "Both", "Neither"),
#                     name = "Significant Variables") + theme_bw() +
#   scale_y_continuous(limits = c(0,20)) +
#   theme(legend.position = "none",#c(0.7, 0.8),
#         legend.title = element_text(size = 9))
# bygenus
#
# pdf("../Images/bygenus_sig.pdf", height = 4, width = 3.5)
# bygenus
# dev.off()
#
# # Find species which occur in all five locations
# focal = monthly %>%
#   group_by(Species) %>% filter(n() > 4)
#
# # Find species which occur in 4 locations
# focal2 = monthly %>%
#   group_by(Species) %>% filter(n() == 4)
#
# pdf("../Images/byspecies5_sig.pdf", height = 5, width = 5)
# my_labels = gsub("\\.", " ", unique(focal$Species))
# my_labels[10:11] = c("Culex pipiens**", "Aedes atlanticus**")
# ggplot(focal, aes(x = Species, fill = Multi_SignifVariables)) +
#   geom_bar(position = position_dodge2(width = 2, preserve = "single")) + coord_flip(expand = F) + ylab("Number of Locations") + xlab("") +
#   scale_fill_manual(values=c("sandybrown", "turquoise4", "hotpink4", "grey50"),
#                     labels = c("Temperature", "Precipitation", "Both", "Neither"),
#                     name = "Significant Variables") + theme_bw() +
#   theme(legend.position = "none", #c(0.8,0.2),
#         axis.text.y = element_text(face = "italic"),
#         plot.subtitle = element_text("** species complex"), legend.title = element_text(size = 9)) +
#   scale_x_discrete(labels = my_labels) + scale_y_continuous(limits = c(0,5))
# dev.off()
#
# pdf("../Images/byspecies4_sig.pdf", height = 4, width = 3.4)
# my_labels = gsub("\\.", " ", unique(focal2$Species))
# my_labels[6] = "Anopheles crucians**"
# ggplot(focal2, aes(x = Species, fill = Multi_SignifVariables)) +
#   geom_bar(position = position_dodge2(width = 2, preserve = "single")) + coord_flip(expand = F) + ylab("Number of Locations") + xlab("") +
#   scale_fill_manual(values=c("sandybrown", "turquoise4", "hotpink4", "grey50"),
#                     labels = c("Temperature", "Precipitation", "Both", "Neither"),
#                     name = "Significant Variables") + theme_bw() +
#   theme(legend.position = "none", axis.text.y = element_text(face = "italic")) +
#   scale_x_discrete(labels = my_labels) + scale_y_continuous(limits = c(0,4), breaks = seq(0,4,1))
# dev.off()
monthly = read.csv("../Results/GAM_monthly.csv", header = T, stringsAsFactors = F)
# Remove rows where either multi model did not converge
remove = which(is.na(monthly$MultiAR_DevianceExplained) | is.na(monthly$MultiAR_DevianceExplained))
monthly = monthly[-remove,]
# Also remove monthly datasets with too much zero inflation
remove = which(monthly$z_inflation_pct > 90)
monthly = monthly[-remove,]
# Hist for each location
# Create a vector of locations
locations = unique(monthly$Location)
# Create empty list to store each location plot
plots = vector("list", length = length(locations))
names(plots) = locations
colors = wes_palette("Royal2", n = 5, type = "discrete")
# Loop through locations to make a histogram for each one
for(i in 1:length(locations)){
tmp = monthly %>% filter(Location == locations[i])
color = colors[i]
plots[[i]] = ggplot(tmp, aes(x = DevDiff)) + geom_histogram(breaks = seq(-10,100,10), fill = colors[i]) + theme_bw() +
xlab("Change in Deviance (%) with\nAddition of Autoregressive Term") + ylab("Number of Locations")  + ggtitle(locations[i]) +
#scale_x_continuous(breaks= seq(-5 ,100,by=5),
#                   labels = c("", 0, rep("",3), 20, rep("",3), 40, rep("",3), 60,
#                              rep("",3), 80, rep("",3), 100),
#                   limits = c(-5,100), expand = c(0,0)) +
#scale_y_continuous(breaks = seq(0,max(tmp$),5)) +
theme(legend.position = c(0.7, 0.65), legend.title = element_text(size = 8),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size =10), axis.title.y = element_text(size = 10),
legend.text = element_text(size = 7), plot.margin = unit(c(0.3,0.3,0,0.1), "cm")) +
scale_y_discrete(breaks = seq(0, ))
print(plots[[i]])
}
packageVersion("wesanderson")
packageVersion("ff")
packageVersion("ffbase")
packageVersion("tmap")
packageVersion("tmaptools")
packageVersion("mgcv")
